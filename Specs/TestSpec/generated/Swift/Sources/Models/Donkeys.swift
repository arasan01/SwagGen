//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Donkeys: APIModel {

    public var donkey: [Donkey]?

    public class Donkey: APIModel {

        public enum KnownKind: String, Codable, Equatable, CaseIterable {
            case asinus = "asinus"
            case hemippus = "hemippus"
            case hemionus = "hemionus"
            case kulan = "kulan"
            case onager = "onager"
            case polyodon = "polyodon"
            case kiang = "kiang"
            case holdereri = "holdereri"
        }

        public var knownKind: String

        public var spot: String?

        public init(knownKind: String, spot: String? = nil) {
            self.knownKind = knownKind
            self.spot = spot
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            knownKind = try container.decode("knownKind")
            spot = try container.decodeIfPresent("spot")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(knownKind, forKey: "knownKind")
            try container.encodeIfPresent(spot, forKey: "spot")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Donkey else { return false }
          guard self.knownKind == object.knownKind else { return false }
          guard self.spot == object.spot else { return false }
          return true
        }

        public static func == (lhs: Donkey, rhs: Donkey) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(donkey: [Donkey]? = nil) {
        self.donkey = donkey
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        donkey = try container.decodeArrayIfPresent("donkey")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(donkey, forKey: "donkey")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Donkeys else { return false }
      guard self.donkey == object.donkey else { return false }
      return true
    }

    public static func == (lhs: Donkeys, rhs: Donkeys) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
